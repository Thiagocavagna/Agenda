@page "/registrar"
@using AgendaProjeto.Enumerations
@using AgendaProjeto.Models
@using AgendaProjeto.Services
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.FluentUI.AspNetCore.Components
@rendermode InteractiveServer
@inject IAddressBookService AddressBookService
@inject NavigationManager NavigationManager

<PageTitle>Registrar Contato</PageTitle>

<h1>Registrar Novo Contato</h1>

@if (ErrorMessage != null)
{
    <div class="alert alert-danger mt-3" role="alert">
        @ErrorMessage
    </div>
}

<EditForm EditContext="editContext">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="d-flex flex-row gap-2 w-200 py-2">
        <FluentTextField Label="Nome" @bind-Value="@contact.Name" />
    </div>

    @foreach (var (phone, index) in contact.Phones.Select((phone, index) => (phone, index)))
    {
        <div class="phone-entry">
            <FluentTextField TextFieldType="TextFieldType.Tel" Label="Número" @bind-Value="@phone.Number" />
            <select @bind="@phone.Type" class="form-select">
                @foreach (PhoneType phoneType in Enum.GetValues(typeof(PhoneType)))
                {
                    <option value="@phoneType">@phoneType</option>
                }
            </select>

            <FluentButton IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="() => RemovePhoneNumber(index)" />
        </div>
        <ValidationMessage For="@(() => phone.Number)" />
        <ValidationMessage For="@(() => phone.Type)" />

    }

    <FluentButton IconEnd="@(new Icons.Regular.Size16.Add())" OnClick="AddPhoneNumber">Novo Número</FluentButton>
    <FluentButton OnClick="RegisterContact">Registrar Contato</FluentButton>
</EditForm>



<style>
    .phone-entry {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-bottom: 10px;
    }

    .form-select {
        padding: 0.5rem;
        font-size: 1rem;
        border-radius: 4px;
        border: 1px solid #ccc;
    }

</style>

@code {
    private string ErrorMessage { get; set; } = null!;
    private EditContext editContext;
    private Contact contact = new();

    protected override void OnInitialized()
    {
        contact.Phones.Add(new Phone());
        editContext = new EditContext(contact);
    }

    private void AddPhoneNumber()
    {
        contact.Phones.Add(new Phone());
    }

    private void RemovePhoneNumber(int index)
    {
        contact.Phones.RemoveAt(index);
    }

    private async Task RegisterContact()
    {
        var isValid = editContext.Validate();
        if (isValid)
        {
            try
            {
                AddressBookService.AddContact(contact);
                NavigationManager.NavigateTo("/contacts");
            }
            catch (Exception ex)
            {
                ErrorMessage = ex.Message;
            }
        }

        StateHasChanged();
    }
}
