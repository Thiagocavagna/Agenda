@page "/{id:guid}/editar"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.FluentUI.AspNetCore.Components
@using AgendaProjeto.Enumerations
@using AgendaProjeto.Models
@using AgendaProjeto.Services
@rendermode InteractiveServer
@inject IAddressBookService AddressBookService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<h3>Editar Contato</h3>


@if (ErrorMessage != null)
{
    <div class="alert alert-danger mt-3" role="alert">
        <pre>@ErrorMessage</pre>
    </div>
}

<EditForm EditContext="editContext">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="d-flex flex-column gap-2 w-200 py-2">
        <FluentTextField Class="w-100" Label="Nome" @bind-Value="@contact.Name" />
    </div>

    <div class="d-flex justify-content-between w-100 p-2">
        <FluentLabel>Números de Telefone</FluentLabel>
        <FluentButton IconStart="@(new Icons.Regular.Size16.Add())" OnClick="AddPhoneNumber">Adicionar Novo Número</FluentButton>
    </div>

    <div class="d-flex flex-column gap-2">
        @foreach (var (phone, index) in contact.Phones.Select((phone, index) => (phone, index)))
        {
            <div class="d-flex w-100">
                <div class="phone-entry w-100">
                    <FluentTextField TextFieldType="TextFieldType.Tel" @bind-Value="@phone.Number" />
                    <select @bind="@phone.Type" class="form-select">
                        @foreach (PhoneType phoneType in Enum.GetValues(typeof(PhoneType)))
                        {
                            <option value="@phoneType">@phoneType</option>
                        }
                    </select>

                    <FluentButton IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="() => RemovePhoneNumber(index)" />
                </div>
                <ValidationMessage For="@(() => phone.Number)" />
                <ValidationMessage For="@(() => phone.Type)" />
            </div>

        }
    </div>

    <FluentButton OnClick="EditContact">Editar Contato</FluentButton>

</EditForm>


<style>
    .phone-entry {
        display: flex;
        align-items: center;
        justify-items: center;
        gap: 10px;
        margin-bottom: 10px;
    }

    .form-select {
        border-radius: 4px;
        border: 1px solid #ccc;
    }

</style>

@code {
    [Parameter]
    public Guid id { get; set; }

    private string ErrorMessage { get; set; } = null!;

    private Contact contact = new();

    private EditContext editContext;

    protected override Task OnInitializedAsync()
    {
        contact = AddressBookService.GetContact(id);
        editContext = new EditContext(contact);

        return base.OnInitializedAsync();
    }

    private void AddPhoneNumber()
    {
        contact.Phones.Add(new Phone());
    }

    private async Task EditContact()
    {
        var isValid = editContext.Validate();
        if (isValid)
        {
            var dialog = await DialogService.ShowDialogAsync<ConfirmDialog>(null, new DialogParameters()
                {
                    Height = "200px",
                    Title = "Confirmar Edição",
                    PreventDismissOnOverlayClick = true,
                    PreventScroll = true,
                });

            var result = await dialog.Result;

            if (!result.Cancelled)
            {
                try
                {
                    AddressBookService.EditContact(contact);
                    NavigationManager.NavigateTo("/contacts");
                }
                catch (Exception ex)
                {
                    ErrorMessage = ex.Message;
                }
            }
           
        }
    }

    private void RemovePhoneNumber(int index)
    {
        contact.Phones.RemoveAt(index);
    }   
}
